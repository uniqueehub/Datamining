# -*- coding: utf-8 -*-
"""DataMiningAssignment2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I2JlkFLq6pydcK9sMd9Jiy0o8bfnXLWe
"""

import pandas as pd

#loading the dataset in df variable
df=pd.read_csv("Heart.csv")
print(df)    #display the data in dataset

# a1]
variance = df.var()   #Calculate variance for numerical attributes
print("Variance:")
print(variance)

statistics_summary = df.describe() # Display the statistics summary including mean, std, min, max, etc.
#Count: Number of non-null values in each column.
#Mean: Average value of each column.
#Standard deviation: Measure of the amount of variation or dispersion in each column.
#Minimum: Minimum value in each column.
#25th percentile (Q1): Value below which 25% of the data falls.
#Median (50th percentile or Q2): Middle value of the dataset.
#75th percentile (Q3): Value below which 75% of the data falls.
#Maximum: Maximum value in each column.
print(statistics_summary)

# a2]
standard_deviation = df.std() #Calculate standard deviation for numerical attributes ,Total numerical attributes are 11 so it will calculate for all those 11 attributes including index column
print("Standard Deviation")
print(standard_deviation)

# Calculate covariance matrix
covariance_matrix = df.cov()
print("Covariance Matrix:")
print(covariance_matrix)

# Calculate correlation matrix
#cov() and corr() functions from pandas are used to compute the covariance and correlation matrices, respectively, for all numerical variables in the dataset.
correlation_matrix = df.corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)

# To Get correlation coefficient between two specific columns, for example, age and sex
correlation_coefficient = df['Age'].corr(df['Sex'])
print("\nCorrelation Coefficient between 'age' and 'sex':", correlation_coefficient)
#Here we get the negative value it denotes that the relation between the age and sex is negative correlation,means that the one is increasing and other is decreasing or vice versa

correlation_coefficient = df['Age'].corr(df['RestBP'])
print("\nCorrelation Coefficient between 'age' and 'RestBP':", correlation_coefficient)
#Here it is positive correlation,means that as age increasing the Resting Blood pressure value is also increasing

correlation_coefficient = df['Age'].corr(df['Chol'])
print("\nCorrelation Coefficient between 'Age' and 'Chol':", correlation_coefficient)
#Here it is positive correlation,means that as age increasing the Cholesterol value is also increasing

correlation_coefficient = df['Age'].corr(df['Fbs'])
print("\nCorrelation Coefficient between 'Age' and 'Fbs':", correlation_coefficient)
# Here there is positive correlationship between Age and Fasting Blood sugar

correlation_coefficient = df['Age'].corr(df['RestECG'])
print("\nCorrelation Coefficient between 'Age' and 'RestECG':", correlation_coefficient)
# Here there is positive correlationship between Age and Resting ElectroCardiographic value

correlation_coefficient = df['Age'].corr(df['MaxHR'])
print("\nCorrelation Coefficient between 'Age' and 'MaxHR':", correlation_coefficient)
# Here there is negative correlationship between Age and Maximum heart rate

correlation_coefficient = df['Age'].corr(df['ExAng'])
print("\nCorrelation Coefficient between 'Age' and 'ExAng':", correlation_coefficient)
#positive correlation between Ang and Exercise angina

correlation_coefficient = df['Age'].corr(df['Oldpeak'])
print("\nCorrelation Coefficient between 'Age' and 'Oldpeak':", correlation_coefficient)
#positive correlation between Age and Oldpeak

correlation_coefficient = df['Age'].corr(df['Slope'])
print("\nCorrelation Coefficient between 'Age' and 'Slope':", correlation_coefficient)
#positive correlation between Age and Slope

correlation_coefficient = df['Age'].corr(df['Ca'])
print("\nCorrelation Coefficient between 'Age' and 'Ca':", correlation_coefficient)
#positive correlation between Age and the number of major vessels

import pandas as pd
df = pd.read_csv('Heart.csv')
num_rows, num_cols = df.shape

# Print the number of independent features
print("Number of independent features:", num_cols)

# the Chi-square test is typically used for categorical variables, not numerical variables.
#It's used to determine if there is a significant association between two categorical variables.
import pandas as pd
from scipy.stats import chi2_contingency

# Load your dataset
data = pd.read_csv('Heart.csv')  # Replace 'your_dataset.csv' with the path to your dataset

# Apply the Chi-square test for independence to each pair of features
num_independent_features = 0

for column1 in data.columns:
    for column2 in data.columns:
        if column1 != column2:
            contingency_table = pd.crosstab(data[column1], data[column2])
            chi2, _, _, _ = chi2_contingency(contingency_table)
            # Use a significance level of 0.05 for the Chi-square test
            if chi2 > 3.84:  # Critical value for 1 degree of freedom at 0.05 significance level
                num_independent_features += 1
                break  # Move to the next feature once independence is found

# Print the number of independent features
print("Number of independent features:", num_independent_features)

import pandas as pd

# Load your dataset
data = pd.read_csv('Heart.csv')

# Compute correlation matrix
correlation_matrix = data.corr()

# Set threshold for correlation coefficient
threshold = 0.5  # Adjust as needed

# Count number of independent features
num_independent_features = sum((correlation_matrix.abs() < threshold).sum() == (len(data.columns) - 1))

# Print the number of independent features
print("Number of independent features:", num_independent_features)

# e]
import pandas as pd
# Load your dataset
df = pd.read_csv('Heart.csv')
# Display basic statistics of the 'age' attribute to understand its distribution
print(df['Age'].describe())

# Define the number of desired bins
num_bins = 5

# Perform equi-frequency binning on the 'age' attribute
df['age_bins'] = pd.qcut(df['Age'], q=num_bins, labels=False)

# Display the frequency distribution of the bins
print(df['age_bins'].value_counts())

# Optionally, we can map bin labels to descriptive categories
bin_labels = ['Young', 'Young Adult', 'Middle-aged', 'Senior', 'Elderly']
df['age_category'] = pd.qcut(df['Age'], q=num_bins, labels=bin_labels)

# Display the first few rows of the DataFrame with bin labels
print(df[['Age', 'age_bins', 'age_category']].head())

# Optionally, we can save the updated dataset to a new file
df.to_csv('discretized_dataset.csv', index=False)

# f)  Normalize RestBP, chol, and MaxHR attributes (considering above dataset) using min-max normalization, Z-score normalization, and decimal scaling normalization.
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, StandardScaler

# Load the dataset into a pandas DataFrame
df = pd.read_csv('Heart.csv')

# Normalize RestBP, chol, and MaxHR using Min-Max Normalization
min_max_scaler = MinMaxScaler()
df[['RestBP_minmax', 'chol_minmax', 'MaxHR_minmax']] = min_max_scaler.fit_transform(df[['RestBP', 'Chol', 'MaxHR']])

# Normalize RestBP, chol, and MaxHR using Z-score Normalization
z_score_scaler = StandardScaler()
df[['RestBP_zscore', 'chol_zscore', 'MaxHR_zscore']] = z_score_scaler.fit_transform(df[['RestBP', 'Chol', 'MaxHR']])

# Normalize RestBP, chol, and MaxHR using Decimal Scaling Normalization
decimal_scaling = lambda x: x / 10**len(str(abs(x)).split('.')[0])
df['RestBP_decimal'] = df['RestBP'].apply(decimal_scaling)
df['chol_decimal'] = df['Chol'].apply(decimal_scaling)
df['MaxHR_decimal'] = df['MaxHR'].apply(decimal_scaling)

# Display the first few rows of the DataFrame with normalized attributes
print(df[['RestBP_minmax', 'chol_minmax', 'MaxHR_minmax', 'RestBP_zscore', 'chol_zscore', 'MaxHR_zscore', 'RestBP_decimal', 'chol_decimal', 'MaxHR_decimal']].head())

#d] can we identify unwanted features
#1]Correlation Analysis: Calculate the correlation between each feature and the target variable.
#Features with low correlation coefficients may be less relevant and could be considered for removal.
# 1. Correlation Analysis
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load the dataset into a pandas DataFrame
df = pd.read_csv('Heart.csv')

correlation_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()